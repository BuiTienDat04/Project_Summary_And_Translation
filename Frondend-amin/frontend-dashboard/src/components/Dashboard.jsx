import React, { useEffect, useState } from "react";
import StatisticsChart from "../components/StatisticsChart";
import { API_BASE_URL } from "../api/api";

const Dashboard = () => {
  // Ch·ªâ gi·ªØ l·∫°i state cho d·ªØ li·ªáu l·∫•y t·ª´ API
  const [data, setData] = useState({
    totalUsers: 0,
    translatedPosts: 0,
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    // 2. Fetch d·ªØ li·ªáu t·ª´ REST API (Gi·ªØ nguy√™n)
    const fetchData = async () => {
      try {
        const response = await fetch(`${API_BASE_URL}/api/dashboard`);
        if (!response.ok) {
          // N·∫øu l·ªói fetch, kh√¥ng n√™n clear interval m√† ch·ªâ b√°o l·ªói
           throw new Error(`Failed to fetch data (status: ${response.status})`);
        }

        const result = await response.json();
        // Ch·ªâ c·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu t·ª´ API
        setData({ 
          totalUsers: result.totalUsers,
          translatedPosts: result.translatedPosts
        });
        setError(null); // X√≥a l·ªói n·∫øu fetch th√†nh c√¥ng
      } catch (err) {
         console.error("Fetch data error:", err.message); // Log l·ªói ra console
         setError(err.message); // Hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng n·∫øu c·∫ßn
      } finally {
         // Ch·ªâ set loading false l·∫ßn ƒë·∫ßu ti√™n
         if (loading) {
            setLoading(false);
         }
      }
    };

    // Fetch l·∫ßn ƒë·∫ßu ngay khi mount
    fetchData();
    // Thi·∫øt l·∫≠p interval ƒë·ªÉ fetch ƒë·ªãnh k·ª≥
    const interval = setInterval(fetchData, 3000); // Gi·ªØ nguy√™n interval

    // Cleanup: D·ªçn d·∫πp interval khi component unmount
    return () => {
      clearInterval(interval);
    };
  }, [loading]); // Th√™m loading v√†o dependency array ƒë·ªÉ finally ch·ªâ ch·∫°y setLoading(false) l·∫ßn ƒë·∫ßu

  // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
  if (loading) {
     return <div className="p-6 min-h-screen flex justify-center items-center">Loading dashboard data...</div>;
  }

  // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
  if (error && !data.totalUsers && !data.translatedPosts) { // Ch·ªâ hi·ªÉn th·ªã l·ªói to√†n m√†n h√¨nh n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu c≈©
     return <div className="p-6 min-h-screen flex justify-center items-center text-red-500">Error loading data: {error}</div>;
  }


  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <h1 className="text-3xl font-bold text-gray-800 mb-8">Dashboard Overview</h1>

       {/* Hi·ªÉn th·ªã l·ªói nh·ªè n·∫øu c√≥ l·ªói fetch sau l·∫ßn ƒë·∫ßu */}
       {error && <div className="mb-4 p-3 bg-red-100 text-red-700 rounded border border-red-300">Could not refresh data: {error}</div>}


      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {/* Card Total Users */}
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 p-6 rounded-lg shadow-lg text-white">
          <h2 className="text-lg font-semibold">Total Users</h2>
          <p className="text-4xl font-bold">{data.totalUsers}</p>
        </div>
        {/* Card Translated Posts */}
        <div className="bg-gradient-to-r from-purple-500 to-purple-600 p-6 rounded-lg shadow-lg text-white">
          <h2 className="text-lg font-semibold">Translated Posts</h2>
          <p className="text-4xl font-bold">{data.translatedPosts}</p>
        </div>
        {/* C√°c card kh√°c n·∫øu c√≥ */}
      </div>

      {/* Bi·ªÉu ƒë·ªì th·ªëng k√™ */}
      <div className="bg-gradient-to-br from-gray-100 to-white p-6 rounded-xl shadow-lg border border-gray-200 mb-8">
        <h2 className="text-2xl font-semibold text-gray-800 flex items-center gap-2 mb-4">
          üìä Statistics Overview
        </h2>
        {/* Ch·ªâ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì n·∫øu c√≥ d·ªØ li·ªáu */}
        {data.totalUsers > 0 || data.translatedPosts > 0 ? (
          <StatisticsChart
            data={[
              { name: "Total Users", value: data.totalUsers },
              { name: "Translated Posts", value: data.translatedPosts },
            ]}
          />
        ) : (
          <p className="text-gray-500">No data available for chart.</p>
        )}
      </div>
    </div>
  );
};

export default Dashboard;